# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hPOZykFGp5yYEevhdY_oFm2ek4j2589-
"""



from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

# 🧾 Your bot token and admin chat ID
BOT_TOKEN = "8032316187:AAE3J2IrFvQkI-vIgxtB2WoRadDozfx845g"
admin_chat_id = 1136279013

# 🚦 Steps in conversation
ITEM, QUANTITY, NAME, PHONE = range(4)

# ✅ /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = """👋 Welcome to AV Fruits & Veggies Bot! 🍅🍍🧅

🚛 Fresh farm veggies & fruits at your doorstep.

🧾 Available Commands:
👉 /order – Place your order
👉 /price – Today's price list
👉 /location – Truck location today
👉 /contact – Call or WhatsApp us

Start now with /order"""
    await update.message.reply_text(welcome_message)

# ✅ /price command
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    price_list = """📊 Today's Price List:
🍅 Tomato: ₹22/kg
🍍 Pineapple: ₹70/piece
🧅 Onion: ₹35/kg
🍈 Papaya: ₹50/kg"""
    await update.message.reply_text(price_list)

# ✅ /location command
async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("📍 Our truck is located at Anna Nagar, near Kora Food Street.")

# ✅ /contact command
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("📞 Contact us on WhatsApp: 9360409987")

# ✅ /order command — step 1: ask item
async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("🛒 What item(s) would you like to order?")
    return ITEM

# Step 2: ask quantity
async def get_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['items'] = update.message.text
    await update.message.reply_text("📦 How much quantity do you want?")
    return QUANTITY

# Step 3: ask name
async def get_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['quantity'] = update.message.text
    await update.message.reply_text("👤 Please enter your name:")
    return NAME

# Step 4: ask phone
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("📱 Please enter your mobile number:")
    return PHONE

# ✅ Final step: store and send to admin
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    # Send confirmation to user
    await update.message.reply_text("✅ Order received! Thank you!")

    # Send order to admin
    message = f"""🧾 New Order Received!
Item: {context.user_data['items']}
Quantity: {context.user_data['quantity']}
Customer Name: {context.user_data['name']}
Phone Number: {context.user_data['phone']}"""

    await context.bot.send_message(chat_id=admin_chat_id, text=message)
    return ConversationHandler.END

# ❌ Cancel command
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("❌ Order cancelled.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# 🚀 Set up the bot
from telegram.ext import Application
app = ApplicationBuilder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("order", order)],
    states={
        ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_item)],
        QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_quantity)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("price", price))
app.add_handler(CommandHandler("location", location))
app.add_handler(CommandHandler("contact", contact))
app.add_handler(conv_handler)

# 👇 Keep the bot running
import asyncio
async def main():
    print("✅ Bot is running. Go to Telegram and type /start")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.sleep(3600)  # 1 hour
    await app.stop()
    await app.shutdown()

await main()
